Plasma Abstract Machine
=======================
Paul Bone <paul@plasmalang.org>
v0.1, September 2015: Initial draft.
Copyright (C) 2015 Paul Bone
License: CC BY-NC-SA 4.0

This document describes the behaviour of the Plasma Abstract Machine (PZ
Machine).  The PZ file format is described in link:pz_format.html[PZ
Bytecode Format].  and implementations of the PZ abstract machine are
discussed elsewhere (TODO)

In this document we use the textual version of the .pz files for
illustrative purposes.  However the textual format is never used as an
interchange format and rarely used as a language so it does not need or have
a specification.

== Basic data types

The abstract machine supports words of varying sizes, with the symbols
representing them.

- 8bit (+w8+)
- 16bit (+w16+)
- 32bit (+w32+)
- 64bit (+w64+)
- fast word width (+w+)
- a word width the same width as a pointer (+wptr+)
- a pointer (+ptr+)

A fast word width is a width that should be the fasted word width for
integers on the platform.  This may take into account register size, memory
usage and maybe implementation convenience.  A word with the same width as a
pointer and a pointer differ only in whether the garbage collector may trace
them.  Which is sagnificant in some contexts (like structures) but not in
others (like instruction parameter widths).

Some instructions only make sense with either signed or unsigned data, this
is up to individual instructions, the PZ format and abstract machine don't
care.  This way "move a 32bit word" makes sense regardless of whether the
word is signed, unsigned, or something else (float, bitfield etc).

The PZ machine also supports structures and arrays, more on those later.

== Registers

The PZ Machine is a stack based machine, it has a single register: the
program counter (PC).  The program counter "points to" the next instruction
to execute.

== Stacks

The basic abstract machine is a stack machine with two stacks.  A return
stack and an expression stack.  The return stack is used to handle procedure
call and return.  Very little control of the return stack is available.
Both basic instructions and procedures are a transformation of
the top of the expression stack.

== Notation

A procedure or instruction's signature may look like:

    + (w w - w)

This describes the instruction + as taking two words from the top of stack
and replacing them with a word.  Calling conventions for procedures work the
same way.  The expression stack is used for argument passing and temporary
storage.

    fibs (w - w)

From a callee's perspective, there is little difference between an
instruction and a call.

If an instruction is available for all word sizes it may be written as:

    + (* * - *)

This is a convention only, there is no support for polymorphism.  When using
the textual format for PZ, you may disambiguate which instruction you need
with a suffix.

eg:

    +:8
    +:16
    +:32
    +:64
    +:w   (fast word width)
    +     (no suffix also means fast word width)
    +:ptr (pointer word width)

This works similarly for literal data.  This is a byte containing the number
23.

    23:8

This is only available for instructions, not calls.

Also in our notation we indicate immediate data with CamelCase, and in the
case of calls and literal data, the instruction name is not provided.  The
instruction to use is available via context.

== Instructions

Each instruction is made from an opcode, between zero and two operand widths
and optionally an immediate value.

=== Load immediate number

    N (- *)

Loads the immediate value onto the expression stack.  (N is any value).

=== Load immediate data

    DataId (- ptr)

Loads the address of the static data referenced by DataId.  (DataId is the
ID of any static data).

=== Zero extend, Sign extend and Truncate

    ze (* - *)
    se (* - *)
    trunc (* - *)

Zero extends, sign extends or truncates the value on the top of the stack.
By truncate we mean discard the most significant bytes.  While most
instructions work on a single operand width, these instructions use two
operand widths.  For example.

    ze (w16 - w32)

Note that it is not necessary (or advised) to use these instructions to
convert to and from pointer data, for example to manipulate tagged pointers.

=== Arithmetic: add, sub, mul, div and mod.

    add (* * - *)
    sub (* * - *)
    mul (* * - *)
    div (* * - *)
    mod (* * - *)

Integer addition, subtraction, multiplication, division and modulus.

=== Comparison: lt_u, lt_s, gt_u, gt_s

    lt_u (* * - w)
    lt_s (* * - w)
    gt_u (* * - w)
    gt_s (* * - w)

Less than and greater than on unsigned and signed data.  Note that the
result is always fast word width.  Likewise conditional instructions always
take their argument in the fast word width.

=== Stack manipulation: dup, drop, swap

    dup (* - * *)

Push a copy of the top of stack item onto the stack.

    drop (* -)

Drop the top of stack item.

    swap (*A *B - *B *A)

Swap the two top of stack items.  This instruction manipulates data of
different data widths.

NOTE: Consider adding +pick+ and +dropn+

=== Procedure calls: call and ret

    ProcId (-)

Call the procedure given by ProcId.  Push the value of the program counter
onto the return stack and load the program counter with the address of the
first instruction in the first block of the procedure.

    ret (-)

Pop the value off the return stack and load it into the program counter
register.

=== Jumps: cjmp

    cjmp BlockId (w -)

Pop a value of the expression stack, if it is non-zero load the address of
the first instruction of the given block into the program counter.

Note that this instruction always consumes the value on the stack.

== Control flow

Control flow is achieved using instructions that modify the program counter.
There are two types of control flow instructions: calls (and returns) and
jumps.

=== Procedures and calls

Procedures are referenced by ID and contain one or more blocks.  A procedure
ID may refer to a local procedure, or an imported procedure (see below).

The call instruction has an immediate value of the ID of the procedure to
call.  The call instruction pushes the program counter onto the return stack
and then jumps to the first instruction of its target.

The ret instruction (return) pops the value from the return stack and loads
it into the program counter.

The tcall instruction (NIY) does not place any value on the return stack.
It simply jumps to the first instruction of its target.

TODO: Indirect calls

=== Blocks and jumps

Each procedure consists of one or more blocks, each block contains a
sequence of one or more instructions, the last instruction must be either
(ret, tcall or jmp).  Each block has an ID which may be used in jump and
conditional jump instructions.

The jmp instruction (jump) jumps to the block in the current procedure with
the ID given in the immediate value.  jmp does not modify stacks.

The cjmp instruction (conditional jump) pops the value off the expression
stack and if it is non-zero jumps to the block given by the ID in it's
immediate value.  If it is zero execution continues, in either case the
value has been removed from the stack (* -)

TODO: Consider indirect jumps, for computed gotos and such.

Note that only blocks can be the target of jump instructions, this way all
jmp targets are known.  Also note execution can never "fall through" a
block.

=== Loops

TODO: Some loops may be handled differently than using blocks and jumps,

== Structs, arrays and data entries.

The stack cannot be used to store complex data, neither can it be
intermediate in the instruction stream.  Complex data (structs and arrays)
must be either statically allocated or allocated on the heap.  In either
case the PZ machine needs to about the structure or array being used.

=== Structs

Before use, structs need to be declared as top-level entries in the PZ
format.  Their declaration gives their number of fields and the field's
widths.  Later in the bytecode representation they are referred to by via
their ID.

=== Arrays

Arrays do not need to be declared ahead of time.  Each use of an array
simply refers to the width of the array's cells, and the number of cells.
Arrays are always packed.

=== Data entries

Static data is declared as a top level item.  Each static data entry gives
it's type (struct reference or array information) and the content of that
statically allocated memory.

TODO: Seperate read-only / read-write.

== Garbage collection

TODO

== Linking to other modules

TODO

== Working with foreign code

TODO

