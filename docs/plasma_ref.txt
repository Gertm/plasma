Plasma Language Reference
=========================
Paul Bone <paul@plasmalang.org>
v0.1, October 2015: Initial draft.
Copyright (C) 2015 Paul Bone
License: CC BY-NC-SA 4.0

As the language is under development this is a working draft.
Many choices may be described only as bullet points.
As the language develops these will be filled out and terms will be
clarified.

== Lexical analysis and parsing

* Input files are UTF-8
* Curly braces for blocks/scoping
* There is no significant whitespace
* either newlines or semicolons delimit statements and declarations (NIY)

=== Parsing

Plasma's draft EBNF is as follows.  In this ENBF syntax I use ( and ) to
denote groups and ? + and * to denote optional, one or more, and zero or
more.

----
    Plasma := ModuleDecl ToplevelItem*

    ModuleDecl := module ident

    ToplevelItem := ExportDirective
                  | ImportDirective
                  | FuncDefinition

    ExportDirective := export IdentList
                     | export *
    ImportDirective := import IdentList

    FuncDefinition := func ident '(' ( Param ( , Param )* )? ')' ->
                          TypeExpr Using* Block

    Param := ident : TypeExpr

    # Using donotes which resources a function may use.
    Using := using IdentList
           | observing IdentList

    TypeExpr := Type
              | Type '(' TypeExpr ( , TypeExpr )* ')'

    Type := ident

    Block := '{' Statement* '}'

    Statement := '!' Statement      % An effectful/observing
                                    % statement
               | Expr

    Expr := ident                           % A value
          | const_str                       % A constant value
          | Expr \( Expr ( , Expr )* \)     % A call

    IdentList := ident ( , ident )*
----

There is a lot missing.  Some changes I intend to make are:

TODO: Probably decouple module declarations from export lists/items.

TODO: Maybe add support to import more than one thing with a single
      directive.

TODO: Probably add support for naming return parameters

TODO: Add support for multiple return

TODO: More expressions and statements

== Modules

Module names begin with an uppercase letter, +CamelCase+ is usually used by
convention.

Each file is a module, the file name must match the module name (case
insensitive).  By convention, file names are all lower case.

Each module begins with a module declaration.  Either:

----
    module ModuleName
----

Or

----
    module ModuleName {
        EXPORT_LIST
    }
----

If there is no export list then everything is exported.

Modules may be imported with an import declaration.

----
    import ModuleName
----

A module cannot be used without an import declaration.

== Code

=== Functions

Code is organised into functions.

A function has the following form.

----
    Name(arg1 : type1, arg2 : type2, ...) -> ret_type1, ret_type2
            Resources?
    {
        Statements
    }
----

If the types are omitted from a non-exported function's argument the compiler
will attempt to infer them.

TODO: Find a way that return parameters can be named.  This will change the
behaviour of functions WRT having the value of their last statement.

TODO: Can the type of a return value be inferred?

TODO: What if neither the name or type of a return value is specified?

Resources is optional and may either or both "using" or "observing" clauses,
which are either the using or observing keywords followed by a list of one
or more comma separated resource names.

=== Statements

Statements may be assignments.

----
    variable = expr
----

Which may be multiple-value expressions.

----
    var1, var2 = expr1, expr2

    var1, var2 = expr # expr returns a two items.
----

Calls (which are also expressions)

----
    function_name(Args);
----

Return

----
    return expr

    return expr1, expr2
----

Or control flow

----
    if (expr) {
        statements
    } else if (expr) {
        statements
    } else {
        statements
    }
----

There may be zero or more else if parts.

Plasma is a single assignment language.  Each variable can only be assigned
to once along any execution path, and must be assigned on each execution
path that returns normally.  This means that an if statement that assigns to
some variable "X" in one branch, must do so in all the other branches.  This
implies that if the statement binds anything at all, then it must have an
"else" branch.

----
    if (...) {
        X = ...
    } else {
        X = ...
    }
----

Since Plasma is a multiple return language a statement may assign more than
one value, because expressions may have more than one value.

----
    X, Y = foo(), bar();

    // or if baz returns two results.
    X, Y = baz();
----

=== Expressions

All expressions are also statements and all statements are also expressions.
The value of a block of statements is the value of the last statement in that
block.  If the block, or the statement itself is a branching structure, the
value is the last statement in the executed branch (see below).

Any control-flow statement is also an expression.

----
    X = if (...) { statements } else { statements }
----

In this case the branches cannot bind anything visible outside of
themselves, and the value of a branch is the value of the last statement in
that branch.

If a multi-return expression is used as a subexpression in another context
then that expression is in-turn duplicated.

----
    x, y = multi_value_expr + 3
----

is

----
    x0, y0 = multi_value_expr
    x = x0 + 3
    y = y0 + 3
----

Therefore calls involved in these expressions must not "use resources".

TODO: Maybe as an alternative to the above, but I doubt it.

A multiple return expression in the context of function application
applies as many arguments as values it returns.

----
    ... = bar(foo(), Z);
----

Is the same as

----
    X, Y = foo();
    ... = bar(X, Y, Z);
----

== Types

* Algebraic types
* parametric polymorphism (aka generics)
* Abstract types
* Other features may be considered for a later version
* Type variables are lower case, type names begin with an uppercase letter
  (Haskell style)

=== Basic types

* Int
* Uint
* IntN
* UintN
* Char
* String (TBA)
* Float (NIY)

== Handling effects (IO, destructive update)

Plasma is a pure language, we need a way to handle effects like IO and
destructive update.  This is called resources.  A declaration for main, which
uses the IO resource looks like.

----
    Int main() using IO
----

Functions have resource annotations.  Resources can be "used" or "observed"
and a function may use or observe any number of resources (decided
statically).  An observed resource may be read but is never updated, a used
resource may be read or updated.  This distinction allows two uses of an
observed resource to commute (code may be re-arranged during optimisation).

Developers may declare new resources, the standard library will provide some
resources.

A caller to a function that uses a resource, must be holding that resource
in the correct mode: either "uses" or if the callee only needs observe then
either "uses" or "observes".

Creating and destroying resources is a special case of "using" that
resource.  The resource will be unusable before and after creating and
destroying them respectively.  If a resource is created and destroyed in the
same function, then that function does not require the "using" annotation
for that resource.

=== Higher order code

If we allow resource-using functions to be passed as higher order values
then the function we pass them to must "become" a higher order using
function itself. However there are some problems.

 * Storing a reference of a function that uses some resource.
 * The order of effects in something like map or fold
 * The order of effects, and associativity and commutativity in Plasma's
   loops.

=== Linking to and storing as data

Linking a resource with a _real_ piece of data, such as a file descriptor,
will be necessary.  Likewise putting resources inside a structure to be used
later, such as a pool of warmed-up database connections, will also be
necessary.

It seems that both these can be accomplished with the same solution.  We
need to add an additional attribute to some types to say that they are also
resources, so that the variable can stand-in for the resource.

----
    write(Fd, ...) using Fd
----

There may also be a syntax sugar for this.  Uniqueness will also need to be
added to types so that there is only one active user of a resource at once.
How this behaves with structures may still be a problem.

=== Commutativity of resources

Optimisation may cause code to be executed in a different order than
written.  The following reorderings are legal.

|===
|           | None  | Observe   | Use
| None      | Y     | Y         | Y
| Observe   | Y     | Y         | N
| Use       | Y     | N         | N
|===

Generally operations on different resources may always commute, such as two
distinct file descriptors.  The exception to this is that IO may not
generally commute.  The logic works as follows:

----
    may_commute(R1, R2)
        if (R1 = IO or R2 = IO)
            consult table above
        else if (R1 = R2)
            consult table above
        else
            may commute.
----

