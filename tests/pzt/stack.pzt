// Stack manipulations

// This is free and unencumbered software released into the public domain.
// See ../LICENSE.unlicense

proc builtin.print (ptr - );
proc builtin.int_to_string (w - ptr);
proc builtin.free (ptr -);

data space = array(w8) {32 0};
data nl = array(w8) {10 0};
data dup_str = array(w8) {100 117 112 32 0};
data drop_str = array(w8) {100 114 111 112 32 0};
data swap_str = array(w8) {115 119 97 112 32 0};
data roll3_str = array(w8) {114 111 108 108 40 51 41 32 0};
data roll4_str = array(w8) {114 111 108 108 40 52 41 32 0};
data pick3_str = array(w8) {112 105 99 107 40 51 41 32 0};
data pick4_str = array(w8) {112 105 99 107 40 52 41 32 0};
proc print_int (w -) {
    call builtin.int_to_string dup call builtin.print call builtin.free
    space call builtin.print
    ret
};

proc print_int_n (w -) {
    block entry {
        dup 0 eq not cjmp rec drop ret
    }
    block rec {
        swap
        call print_int
        1 sub
        tcall print_int_n
    }
};

proc print_nl (-) {
    nl call builtin.print ret
};

proc values (- w w w w) {
    1 2 3 4 ret
};

proc main (- w) {
    // 0 goes on the stack now as the program's return code, and to show
    // that it is undisturbed doring the test.
    0

    dup_str call builtin.print
    call values
    dup
    5 call print_int_n
    call print_nl

    drop_str call builtin.print
    call values
    drop
    3 call print_int_n
    call print_nl

    swap_str call builtin.print
    call values
    swap
    4 call print_int_n
    call print_nl

    roll3_str call builtin.print
    call values
    roll 3
    4 call print_int_n
    call print_nl

    roll4_str call builtin.print
    call values
    roll 4
    4 call print_int_n
    call print_nl

    pick3_str call builtin.print
    call values
    pick 3
    5 call print_int_n
    call print_nl

    pick4_str call builtin.print
    call values
    pick 4
    5 call print_int_n
    call print_nl

    ret
};

