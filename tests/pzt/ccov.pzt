// Test calling conventions

// This is free and unencumbered software released into the public domain.
// See ../LICENSE.unlicense


// Constant static data.
// data NAME = TYPE VALUE;
data hello_string = array(w8) { 72 101 108 108 111 10 0 };

// Forward declaration for imported procedure.
// These are required for the assembler to build the string table and will
// be encoded into the PZ bytecode so that a code generator can see the
// signature of the call.
import builtin.print (ptr - );

proc test_proc ( - ) {
    get_env
    load main_env_struct 2:ptr
    load main_env_struct 1:ptr drop
    call_ind
    ret
};

closure test_clo = test_proc main_env;

proc main_proc (- w) {
    // Use a closure call to the same environment.
    call test_clo

    // use a proc call, this is an optimsation, but it's very common.
    call test_proc

    0 ret
};

struct main_env_struct { ptr ptr };
data main_env = main_env_struct { builtin.print hello_string };

// Build a closure.
closure main_closure = main_proc main_env;

entry main_closure;

